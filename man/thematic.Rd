% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/thematic.R
\name{thematic_begin}
\alias{thematic_begin}
\alias{thematic_end}
\title{Automatic theming of static plots}
\usage{
thematic_begin(
  bg = "auto",
  fg = "auto",
  accent = "auto",
  font = NA,
  sequential = sequential_gradient(),
  qualitative = okabe_ito()
)

thematic_end()
}
\arguments{
\item{bg}{a background color.}

\item{fg}{a foreground color.}

\item{accent}{a color for making certain graphical markers 'stand out'
(e.g., the fitted line color for \code{\link[ggplot2:geom_smooth]{ggplot2::geom_smooth()}}).
Can be 2 colors for lattice (stroke vs fill accent).}

\item{font}{a \code{font_spec()} object. If missing, font defaults are not altered.}

\item{sequential}{a color palette for graphical markers that encode
numeric values. Can be a vector of color codes or a
\code{\link[=sequential_gradient]{sequential_gradient()}} object.}

\item{qualitative}{a color palette for graphical markers that encode
qualitative values (won't be used in ggplot2 when the number of data
levels exceeds the max allowed colors). Defaults to the Okabe-Ito colorscale.}
}
\value{
Returns any information about the previously set theme (if any), invisibly.
}
\description{
Enable (or disable) automatic theming of ggplot2, lattice, and base graphics.
While enabled, thematic registers \code{\link[=plot.new]{plot.new()}}/\code{\link[=grid.newpage]{grid.newpage()}} hooks
that set relevant options (i.e., \code{\link[graphics:par]{graphics::par()}}, \code{\link[grid:gpar]{grid::gpar()}},
\code{\link[lattice:trellis.par.set]{lattice::trellis.par.set()}}, \code{\link[ggplot2:theme_set]{ggplot2::theme_set()}}, etc) based on
the current context.
}
\details{
Colors may be anything understood by \code{\link[=col2rgb]{col2rgb()}} or \code{htmltools::parseCssColors()}
(i.e., may be any valid R or CSS color string).
}
\section{Resolving 'auto'}{


The \code{bg}, \code{fg}, \code{accent}, and \code{font} arguments all support a value of \code{'auto'}.
In this case, thematic does it's best to use information based on the current
plotting context to inform relevant graphical parameters. The order of priority
for resolving \code{'auto'} is as follows:
\enumerate{
\item If running inside \code{shiny::renderPlot()}, use \code{shiny::getCurrentOutputInfo()}.
\item If set, use \code{\link[=auto_preferences_set]{auto_preferences_set()}}.
\item If running inside \code{rmarkdown::html_document()} with \code{theme = NULL},
use \code{bootstraplib::bs_theme_get_variables()}.
\item If running inside RStudio, use \code{rstudioapi::getThemeInfo()}.
}
}

\examples{
# simple dark mode
thematic_begin("black", "white")
plot(1:10)
plot(1:10, col = 1:10)
lattice::show.settings()

# use any color code
thematic_begin("#444444", "#e4e4e4")
plot(1:10)
plot(1:10, col = 1:10)
lattice::show.settings()

# restores _original_ state
thematic_end()
plot(1:10)
lattice::show.settings()

thematic_begin("darkblue", "skyblue", "orange")
image(volcano)
image(volcano, col = thematic_get_option("sequential"))
lattice::show.settings()
thematic_end()

}
\seealso{
\code{\link[=font_spec]{font_spec()}}, \code{\link[=thematic_with_device]{thematic_with_device()}}, \code{\link[=thematic_get]{thematic_get()}}
}
